/*
 * getValidAccountInfoGsims
 * getValidAccountInfoGsims
 *
 * OpenAPI spec version: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.BusinessQueryErrorResponse;
import io.swagger.client.model.QueryErrorResponse;
import io.swagger.client.model.SystemQueryErrorResponse;
import io.swagger.client.model.ValidAccountInfoGsimsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getValidAccountInfoGsims
     * @param accountId Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN (required)
     * @param credentials Username and password to authenticate the API against core-banking. (optional)
     * @param companyId Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001. (optional)
     * @param deviceId Identifies the device type (optional)
     * @param userRole User who initiated the transaction (optional)
     * @param disablePagination  (optional)
     * @param idType Specifies the type of the identifier used for the participant ID such as the BIC or NATIONAL.ID of a non-financial Payments Market Infrastructures (PMI) (optional)
     * @param documentId Based on documentCode, the field defaults the required document codes (optional)
     * @param pageSize The total number of records per page (optional)
     * @param pageStart The record from which the response should be displayed (optional)
     * @param pageToken Unique id expected to get as part of response from Transact on every enquiry request (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getValidAccountInfoGsimsCall(String accountId, String credentials, String companyId, String deviceId, String userRole, String disablePagination, String idType, String documentId, Integer pageSize, Integer pageStart, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/party/v1.0.0/party/get/accounts/gsims/publish/{accountId}"
            .replaceAll("\\{" + "accountId" + "\\}", apiClient.escapeString(accountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (idType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("idType", idType));
        if (documentId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("documentId", documentId));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_size", pageSize));
        if (pageStart != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_start", pageStart));
        if (pageToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("page_token", pageToken));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (credentials != null)
        localVarHeaderParams.put("credentials", apiClient.parameterToString(credentials));
        if (companyId != null)
        localVarHeaderParams.put("companyId", apiClient.parameterToString(companyId));
        if (deviceId != null)
        localVarHeaderParams.put("deviceId", apiClient.parameterToString(deviceId));
        if (userRole != null)
        localVarHeaderParams.put("userRole", apiClient.parameterToString(userRole));
        if (disablePagination != null)
        localVarHeaderParams.put("disablePagination", apiClient.parameterToString(disablePagination));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "apiKey", "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getValidAccountInfoGsimsValidateBeforeCall(String accountId, String credentials, String companyId, String deviceId, String userRole, String disablePagination, String idType, String documentId, Integer pageSize, Integer pageStart, String pageToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'accountId' is set
        if (accountId == null) {
            throw new ApiException("Missing the required parameter 'accountId' when calling getValidAccountInfoGsims(Async)");
        }
        

        com.squareup.okhttp.Call call = getValidAccountInfoGsimsCall(accountId, credentials, companyId, deviceId, userRole, disablePagination, idType, documentId, pageSize, pageStart, pageToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * getValidAccountInfoGsims
     * getValidAccountInfoGsims
     * @param accountId Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN (required)
     * @param credentials Username and password to authenticate the API against core-banking. (optional)
     * @param companyId Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001. (optional)
     * @param deviceId Identifies the device type (optional)
     * @param userRole User who initiated the transaction (optional)
     * @param disablePagination  (optional)
     * @param idType Specifies the type of the identifier used for the participant ID such as the BIC or NATIONAL.ID of a non-financial Payments Market Infrastructures (PMI) (optional)
     * @param documentId Based on documentCode, the field defaults the required document codes (optional)
     * @param pageSize The total number of records per page (optional)
     * @param pageStart The record from which the response should be displayed (optional)
     * @param pageToken Unique id expected to get as part of response from Transact on every enquiry request (optional)
     * @return ValidAccountInfoGsimsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ValidAccountInfoGsimsResponse getValidAccountInfoGsims(String accountId, String credentials, String companyId, String deviceId, String userRole, String disablePagination, String idType, String documentId, Integer pageSize, Integer pageStart, String pageToken) throws ApiException {
        ApiResponse<ValidAccountInfoGsimsResponse> resp = getValidAccountInfoGsimsWithHttpInfo(accountId, credentials, companyId, deviceId, userRole, disablePagination, idType, documentId, pageSize, pageStart, pageToken);
        return resp.getData();
    }

    /**
     * getValidAccountInfoGsims
     * getValidAccountInfoGsims
     * @param accountId Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN (required)
     * @param credentials Username and password to authenticate the API against core-banking. (optional)
     * @param companyId Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001. (optional)
     * @param deviceId Identifies the device type (optional)
     * @param userRole User who initiated the transaction (optional)
     * @param disablePagination  (optional)
     * @param idType Specifies the type of the identifier used for the participant ID such as the BIC or NATIONAL.ID of a non-financial Payments Market Infrastructures (PMI) (optional)
     * @param documentId Based on documentCode, the field defaults the required document codes (optional)
     * @param pageSize The total number of records per page (optional)
     * @param pageStart The record from which the response should be displayed (optional)
     * @param pageToken Unique id expected to get as part of response from Transact on every enquiry request (optional)
     * @return ApiResponse&lt;ValidAccountInfoGsimsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ValidAccountInfoGsimsResponse> getValidAccountInfoGsimsWithHttpInfo(String accountId, String credentials, String companyId, String deviceId, String userRole, String disablePagination, String idType, String documentId, Integer pageSize, Integer pageStart, String pageToken) throws ApiException {
        com.squareup.okhttp.Call call = getValidAccountInfoGsimsValidateBeforeCall(accountId, credentials, companyId, deviceId, userRole, disablePagination, idType, documentId, pageSize, pageStart, pageToken, null, null);
        Type localVarReturnType = new TypeToken<ValidAccountInfoGsimsResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * getValidAccountInfoGsims (asynchronously)
     * getValidAccountInfoGsims
     * @param accountId Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN &amp; BBAN (required)
     * @param credentials Username and password to authenticate the API against core-banking. (optional)
     * @param companyId Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001. (optional)
     * @param deviceId Identifies the device type (optional)
     * @param userRole User who initiated the transaction (optional)
     * @param disablePagination  (optional)
     * @param idType Specifies the type of the identifier used for the participant ID such as the BIC or NATIONAL.ID of a non-financial Payments Market Infrastructures (PMI) (optional)
     * @param documentId Based on documentCode, the field defaults the required document codes (optional)
     * @param pageSize The total number of records per page (optional)
     * @param pageStart The record from which the response should be displayed (optional)
     * @param pageToken Unique id expected to get as part of response from Transact on every enquiry request (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getValidAccountInfoGsimsAsync(String accountId, String credentials, String companyId, String deviceId, String userRole, String disablePagination, String idType, String documentId, Integer pageSize, Integer pageStart, String pageToken, final ApiCallback<ValidAccountInfoGsimsResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getValidAccountInfoGsimsValidateBeforeCall(accountId, credentials, companyId, deviceId, userRole, disablePagination, idType, documentId, pageSize, pageStart, pageToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ValidAccountInfoGsimsResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
